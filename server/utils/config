// utils/config.js
const env = process.env;
const isProd = env.NODE_ENV === "production";

function normalizeOrigin(url) {
  try {
    const u = new URL(url);
    // Rebuild origin, ignore trailing slashes
    return `${u.protocol}//${u.host}`;
  } catch {
    return url?.replace(/\/+$/, "");
  }
}

function requireVar(name) {
  const v = env[name];
  if (!v && isProd) throw new Error(`Missing required env var: ${name}`);
  return v;
}

const FRONTEND_URL = normalizeOrigin(
  env.FRONTEND_URL || "http://localhost:3001"
);
const OAUTH_CALLBACK_URL =
  env.OAUTH_CALLBACK_URL || "http://localhost:3000/auth/google/callback";

// Decide cross-site automatically when possible, but allow override
const crossSiteAuto = (() => {
  try {
    const be = new URL(OAUTH_CALLBACK_URL).origin;
    const fe = new URL(FRONTEND_URL).origin;
    return be !== fe;
  } catch {
    return false;
  }
})();
const crossSite =
  (env.CROSS_SITE_COOKIES === "true") || crossSiteAuto;

module.exports = {
  PORT: Number(env.PORT || 3000),

  FRONTEND_URL,
  OAUTH_CALLBACK_URL,

  AUTH_ALLOW_LOCAL: env.AUTH_ALLOW_LOCAL !== "false",

  COOKIE: {
    httpOnly: true,
    secure: isProd,                 // Railway is HTTPS in prod
    sameSite: crossSite ? "none" : "lax",
    maxAge: 30 * 24 * 60 * 60 * 1000, // 30d
  },

  SMTP: {
    HOST: env.SMTP_HOST,
    USER: env.SMTP_USER,
    PASS: env.SMTP_PASS,
    PORT: Number(env.SMTP_PORT || 587),
    FROM: env.SMTP_FROM || env.SMTP_USER,
  },

  GOOGLE: {
    CLIENT_ID: requireVar("GOOGLE_CLIENT_ID"),
    CLIENT_SECRET: requireVar("GOOGLE_CLIENT_SECRET"),
  },

  SESSION_SECRET: requireVar("SESSION_SECRET"),
};
